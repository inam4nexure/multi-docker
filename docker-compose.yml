version: '3'
services:
  postgres:
    image: 'postgres:latest'
    environment:
          - POSTGRES_PASSWORD=password
  redis:
    image: 'redis:latest'
  nginx:
    depends_on:
      - api
      - client
    restart: always
    build:
      dockerfile: Dockerfile.dev
      context: ./nginx
    ports:
      - '8098:80'
  api:
    depends_on:
      - postgres
    build:
      dockerfile: Dockerfile.dev
      context: ./server
      # . (dot) means look in current directory
      # ./server means I wanted to use a context, I wanted to use
      # the source code inside this (server) directory
    volumes:
      - /app/node_modules # it means inside the container don't try to overwrite it, don't try to redirect access to it
      # just leave that folder as it is
      - ./server:/app # (see : here)it means look at the local server directory and copy every thing inside it to
      # the app directory fo the container, by that if we make any change in our source code this will automatically
      # reflected inside our container without rebuilding it.
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379 # this is default port
      - PGUSER=postgres
      - PGHOST=postgres
      - PGDATABASE=postgres
      - PGPASSWORD=password
      - PGPORT=5432
      # values of these environment variable can be find in the documentation of the repository inside
      # docker hub (hub.docker.com) there search for the
      # image (postgres, redis or whatever you used) and look into te details
  client:
    stdin_open: true
    build:
      dockerfile: Dockerfile.dev
      context: ./client
    volumes:
      - /app/node_modules
      - ./client:/app
  worker:
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    build:
      dockerfile: Dockerfile.dev
      context: ./worker
    volumes:
      - /app/node_modules
      - ./worker:/app